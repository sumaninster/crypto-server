// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/currency/all": {
            "get": {
                "description": "Get the real-time crypto prices for all supported currencies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Currency"
                ],
                "summary": "Get the real-time crypto prices for all supported currencies",
                "responses": {
                    "200": {
                        "description": "Map of currency symbols and their real-time prices",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "$ref": "#/definitions/main.CurrencyPrice"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.HTTPBadRequestError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.HTTPFileNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.HTTPInternalServerError"
                        }
                    }
                }
            }
        },
        "/currency/{symbol}": {
            "get": {
                "description": "Get the real-time crypto price for a currency symbol",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Currency"
                ],
                "summary": "Get the real-time crypto price for a currency symbol",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Currency symbol (e.g. BTCUSDT, ETHBTC)",
                        "name": "symbol",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CurrencyPrice object",
                        "schema": {
                            "$ref": "#/definitions/main.CurrencyPrice"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/main.HTTPBadRequestError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/main.HTTPFileNotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.HTTPInternalServerError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "main.CurrencyPair": {
            "type": "object",
            "properties": {
                "base_currency": {
                    "type": "string"
                },
                "fee_currency": {
                    "type": "string"
                },
                "make_rate": {
                    "type": "string"
                },
                "margin_trading": {
                    "type": "boolean"
                },
                "max_initial_leverage": {
                    "type": "string"
                },
                "quantity_increment": {
                    "type": "string"
                },
                "quote_currency": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "take_rate": {
                    "type": "string"
                },
                "tick_size": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "main.CurrencyPrice": {
            "type": "object",
            "properties": {
                "ask": {
                    "type": "string"
                },
                "bid": {
                    "type": "string"
                },
                "currency_pair": {
                    "$ref": "#/definitions/main.CurrencyPair"
                },
                "high": {
                    "type": "string"
                },
                "last": {
                    "type": "string"
                },
                "low": {
                    "type": "string"
                },
                "open": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "volume": {
                    "type": "string"
                },
                "volume_quote": {
                    "type": "string"
                }
            }
        },
        "main.HTTPBadRequestError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "Bad Request: The server cannot or will not process the request due to something that is perceived to be a client error (for example, malformed request syntax, invalid request message framing, or deceptive request routing)."
                }
            }
        },
        "main.HTTPFileNotFoundError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 404
                },
                "message": {
                    "type": "string",
                    "example": "Not Found: Cannot retrieve the page that was requested. The following are some common causes of this error message: The requested file has been renamed. The requested file has been moved to another location and/or deleted."
                }
            }
        },
        "main.HTTPInternalServerError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "message": {
                    "type": "string",
                    "example": "Internal Server Error: The server encountered an unexpected condition that prevented it from fulfilling the request. This error response is a generic "
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Crypto Server API",
	Description:      "This is a Crypto Server to fetch data from HitBTC API.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
